#!/bin/bash
set -x

# todo: added for debugging. to be removed once integration is complete
echo "------------- ENV variables --------------------"
echo "COMPONENTS=${COMPONENTS}" 
echo "ALLOW_UNSIGNED=${ALLOW_UNSIGNED} "
echo "CONFLUENT_PACKAGES_REPO=${CONFLUENT_PACKAGES_REPO}"
echo "KAFKA_VERSION=${KAFKA_VERSION}"
echo "CONFLUENT_MVN_LABEL=${CONFLUENT_MVN_LABEL}"
echo "CONFLUENT_DEB_LABEL=${CONFLUENT_DEB_LABEL}"
echo "CONFLUENT_RPM_LABEL=${CONFLUENT_RPM_LABEL}"
echo "CONFLUENT_MAJOR_VERSION=${CONFLUENT_MAJOR_VERSION}"
echo "CONFLUENT_MINOR_VERSION=${CONFLUENT_MINOR_VERSION}"
echo "CONFLUENT_PATCH_VERSION=${CONFLUENT_PATCH_VERSION}"
echo "CONFLUENT_VERSION=${CONFLUENT_VERSION}"
echo "VERSION=${VERSION}"
echo "COMMIT_ID=${COMMIT_ID}"
echo "BUILD_NUMBER=${BUILD_NUMBER}"
echo "REPOSITORY=${REPOSITORY}"
echo "RELEASE_QUALITY=${RELEASE_QUALITY}"

for component in ${COMPONENTS} ; do
    echo "\n\nBuilding ${component} \n==========================================\n "

    if [ "${component}" = "base" ]; then
        BUILD_ARGS="--build-arg ALLOW_UNSIGNED=${ALLOW_UNSIGNED} --build-arg CONFLUENT_PACKAGES_REPO=${CONFLUENT_PACKAGES_REPO} --build-arg CONFLUENT_MVN_LABEL=${CONFLUENT_MVN_LABEL}"

    else
        BUILD_ARGS=""
    fi

    #TODO: undo this... only building debian images for now
    #for type in "" rpm; do
    for type in ""; do
        DOCKER_FILE="debian/${component}/Dockerfile"
        COMPONENT_NAME=${component}

        if [ "${type}" = "rpm" ]; then
            COMPONENT_NAME="rpm-${component}"
            DOCKER_FILE="${DOCKER_FILE}.rpm"
            CONFLUENT_PLATFORM_LABEL=${CONFLUENT_RPM_LABEL}
        else
            CONFLUENT_PLATFORM_LABEL=${CONFLUENT_DEB_LABEL}
        fi

        if [ -a "${DOCKER_FILE}" ]; then
            docker buildx build --platform=linux/arm64,linux/amd64 --pull --build-arg KAFKA_VERSION=${KAFKA_VERSION} --build-arg CONFLUENT_PLATFORM_LABEL=${CONFLUENT_PLATFORM_LABEL} --build-arg CONFLUENT_MAJOR_VERSION=${CONFLUENT_MAJOR_VERSION} --build-arg CONFLUENT_MINOR_VERSION=${CONFLUENT_MINOR_VERSION} --build-arg CONFLUENT_PATCH_VERSION=${CONFLUENT_PATCH_VERSION} --build-arg COMMIT_ID=${COMMIT_ID} --build-arg BUILD_NUMBER=${BUILD_NUMBER} ${BUILD_ARGS} --build-arg REPOSITORY=${REPOSITORY} -t ${REPOSITORY}/cp-${COMPONENT_NAME}:latest --push -f ${DOCKER_FILE} debian/${component} || exit 1

            #TODO: Don't want to use docker tag with buildx image, need to work with the manifest, use something like docker manifest cp?
            #docker manifest inspect ${REPOSITORY}/cp-${COMPONENT_NAME}:latest
            #Take the manifest digests out of the manifest list, then:
            #docker manifest create ${REPOSITORY}/cp-${COMPONENT_NAME}:${VERSION} ${REPOSITORY}/cp-${COMPONENT_NAME}@sha256:...1 ${REPOSITORY}/cp-${COMPONENT_NAME}@sha256:...2 ${REPOSITORY}/cp-${COMPONENT_NAME}@sha256:...3
            #docker manifest push ${REPOSITORY}/cp-${COMPONENT_NAME}:${VERSION}
        fi;
    done
done
